#!/usr/bin/env python

from itertools import izip
import os
import optparse

import arghmm

from rasmus import stats
from rasmus import treelib
from rasmus import util


o = optparse.OptionParser()
#o.add_option("-w", "--window", default=10000, type="int")
o.add_option("-s", "--start", default=0, type="int")
o.add_option("-e", "--end", default=5000, type="int")
o.add_option("-d", "--step", default=1, type="int")
o.add_option("-r", "--region")
conf, args = o.parse_args()


#=============================================================================

def iter_allele_ages(smc, sites, region=None, maxage=1000000):
    if region is None:
        region = [smc.header["start"], smc.header["end"]]
    nseqs = sites.nseqs()
    chrom = smc.header["chrom"]
    names = smc.header["names"]
    for item in smc:
        if item["tag"] == "TREE":
            if not util.overlap(item["start"], item["end"],
                                region[0], region[1]):
                continue
            #tree = smc.parse_tree(item["tree"])
            tree = item["tree"]
            arghmm.rename_tree(tree, names)
            for pos, col in sites.iter_region(item["start"], item["end"]):
                derived = sites.get_minor(pos)
                node = treelib.lca([tree[x] for x in derived])
                if node == tree.root:
                    derived = sites.get_major(pos)
                    node = treelib.lca([tree[x] for x in derived])
                yield [chrom, pos-1, pos, len(derived) / float(nseqs),
                       len(node.leaves()),
                       sites.get(pos, derived[0]),
                       node.data["age"], (node.parent.data["age"]
                                          if node.parent else maxage)]

            # revert names
            for i, name in enumerate(names):
                tree.rename(name, i)


#=============================================================================

smc_file = args[0]
sites_file = args[1]
#window = int(sys.argv[3])

if "%d" in smc_file:
    smc_files = []
    for i in range(conf.start, conf.end, conf.step):
        fn = smc_file % i
        if os.path.exists(fn):
            smc_files.append(fn)
else:
    smc_files = [smc_file]


# get region
arg_name = os.path.basename(os.path.dirname(smc_files[0]))

if conf.region:
    region = map(int, conf.region.split("-"))
else:
    region = None

#chr, start, ext = arg_name.split(".")
#start = int(start)
#region = [start, start+window]

# read
sites = arghmm.read_sites(sites_file, region)
#smcs = [arghmm.SMCReader(f) for f in smc_files]
smcs = [arghmm.SMCReader(f, parse_trees=True, apply_spr=True)
        for f in smc_files]

ages = [iter_allele_ages(smc, sites, sites.region) for smc in smcs]

for rows in izip(*ages):
    info = rows[0][:6]
    ages = [row[6:8] for row in rows]
    low = stats.mean(util.cget(ages, 0))
    top = stats.mean(util.cget(ages, 1))

    row = info + [low, top] + util.flatten(ages)
    util.print_row(*row)
