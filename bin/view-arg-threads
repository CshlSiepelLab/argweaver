#!/usr/bin/env python-i
# Wed Dec 19 00:34:37 EST 2012

import sys
import optparse

from rasmus import util
from compbio import arglib
from compbio.vis import argvis
import arghmm

import summon
from summon.hud import RulerHud
from summon.core import *

#=============================================================================
# arguments

o = optparse.OptionParser()
o.add_option("-a", "--arg")
o.add_option("-s", "--sites")
o.add_option("-c", "--chrom-color")
o.add_option("-p", "--pos", type="int", default=None)
o.add_option("-r", "--region", metavar="START-END", default=None)
conf, args = o.parse_args()


#=============================================================================

def read_chrom_colors(filename):
    chrom_colors = {}
    for row in util.read_delim(filename):
        if len(row) == 4:
            r, g, b = map(float, row[1:])
            a = 1.0
        elif len(row) == 5:
            r, g, b, a = map(float, row[1:])
        else:
            raise Exception("wrong number of fields in chrom color file")
        chrom_colors[row[0]] = [r, g, b, a]
    return chrom_colors


#=============================================================================
# reading


util.tic("reading ARG")
if conf.arg.endswith(".smc.gz"):
    arg = arghmm.read_arg(conf.arg)
else:
    arg = arglib.read_arg(conf.arg)
util.toc()

if conf.region:
    region = map(int, conf.region.split("-"))
else:
    region = [None, None]

util.tic("read sites")
if conf.sites:
    util.tic("reading sites")
    if region:
        sites = arghmm.read_sites(conf.sites, region)
    else:
        sites = arghmm.read_sites(conf.sites)
    util.toc()
else:
    sites = None
util.toc()


#=============================================================================

util.tic("layout chromosomes")
blocks, leaf_layout = argvis.layout_chroms(arg, region[0], region[1])
util.toc()

# color chromosomes based on file
chrom_colors = None
if conf.chrom_color:
    chrom_colors = read_chrom_colors(conf.chrom_color)

# color chromosomes based on position
if conf.pos:
    for i in range(len(blocks)):
        if blocks[i][0] <= conf.pos < blocks[i][1]:
            items = leaf_layout[i].items()
            items.sort(key=lambda x: x[1])
            order = util.cget(items, 0)
            break
    cmap = util.rainbow_color_map(low=0, high=len(order)-1)
    chrom_colors = {}
    for i, name in enumerate(order):
        chrom_colors[name] = cmap.get(i)


win = summon.Window()
win.set_bgcolor(.2,.2,.2)
ruler = RulerHud(win, fgcolor=(1,1,1), left=False)
win.set_binding(input_click("left", "up"), lambda: argvis.mouse_click(win))

snp_colors = {"compat": [1, 0, 0],
              "noncompat": [0, 1, 0]}

util.tic("drawing")
g = win.add_group(group())
argvis.draw_arg_threads(arg, blocks, leaf_layout, sites=sites,
                        chrom_color=[.2,.2,1,.8],
                        chrom_colors=chrom_colors,
                        #compat=True,
                        snp_colors={"compat": [1, 1, 1],
                                    "noncompat": [0, 1, 0]},
                        spr_alpha=1, spr_trim=5,
                        draw_group=g, win=win)
win.home("exact")
util.toc()

