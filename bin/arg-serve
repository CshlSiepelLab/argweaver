#!/usr/bin/env python

import json

from rasmus.common import *
from arghmm.bottle import request, get, HTTPResponse, static_file, run
import arghmm
from arghmm.db import SiteDB



#=============================================================================
# routes

# get one tree
@get('/tree/:pos')
def get_tree(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")
    
    for item in smc:
        if item["tag"] == "TREE":
            if item["start"] <= pos < item["end"]:
                print item
                return callback + "('" + json.dumps(item) + "');"
    
    return ""


# get one tree and spr
@get('/tree-spr/:pos')
def get_tree(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    spr = False
    for item in smc:
        if item["tag"] == "TREE":
            if item["start"] <= pos < item["end"]:
                print item
                result.append(item)
                spr = True
        elif item["tag"] == "SPR" and spr:
            result.append(item)
            break
    
    return callback + "('" + json.dumps(result) + "');"


# get a region of trees and sprs
@get('/trees/:region')
def get_trees(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    
    for item in smc:
        if item["tag"] == "TREE":
            if util.overlap(start, end, item["start"], item["end"]):
                print item
                result.append(item)
        elif item["tag"] == "SPR":
            if start <= item["pos"] < end:
                print item
                result.append(item)

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sprs/:region')
def get_trees(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    
    for item in smc:
        if item["tag"] == "SPR":
            if start <= item["pos"] < end:
                print item
                result.append(item)

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sites/:region')
def get_sites(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    
    for pos, col in sites.get_sites(chrom, start, end, arg_names):
        result.append({"pos": pos, "col": sites[pos]})

    return callback + "('" + json.dumps(result) + "');"



#=============================================================================

smc_file = sys.argv[1]

if len(sys.argv) > 2:
    sites_file = sys.argv[2]
else:
    sites_file = None

print "reading...",
smc = list(arghmm.iter_smc_file(smc_file))

for item in smc:
    if item["tag"] == "NAMES":
        arg_names = item["names"]
        break

if sites_file:
    util.tic("reading sites...")
    if sites_file.endswith(".db"):
        sites_db = SitesDB().connect(sites_file)
    else:
        sites_db = SitesDB().connect(":memory:")
        sites_db.add_sites_file(sites_file)
    util.toc()
else:
    sites = None
print "done"


run(host='localhost', port=8080)

