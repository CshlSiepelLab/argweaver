#!/usr/bin/env python

import json

from rasmus.common import *
from arghmm.bottle import request, get, HTTPResponse, static_file, run
import arghmm
from arghmm.db import ArgDB, SitesDB



#=============================================================================
# routes

# get one tree
@get('/tree/:pos')
def get_tree(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")

    return callback + "('" + \
           json.dumps(smc_db.get_trees(chrom, pos, pos).next()) + "');"

    '''
    for item in smc:
        if item["tag"] == "TREE":
            if item["start"] <= pos < item["end"]:
                print item
                return callback + "('" + json.dumps(item) + "');"
    '''
    
    return ""


# get one tree and spr
@get('/tree-spr/:pos')
def get_tree_spr(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")

    result = [smc_db.get_trees(chrom, pos, pos).next()]
    end = result[0]["end"]
    result.append(smc_db.get_sprs(chrom, end, end+1).next())

    '''
    result = []
    spr = False
    for item in smc:
        if item["tag"] == "TREE":
            if item["start"] <= pos < item["end"]:
                print item
                result.append(item)
                spr = True
        elif item["tag"] == "SPR" and spr:
            result.append(item)
            break
    '''
    
    return callback + "('" + json.dumps(result) + "');"


# get a region of trees and sprs
@get('/trees/:region')
def get_trees(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    result.extend(smc_db.get_trees(chrom, start, end))
    result.extend(smc_db.get_sprs(chrom, start, end))
    result.sort(key=lambda x: (x["start"], 1) if "start" in x
                else (x["pos"], 0))

    '''
    for item in smc:
        if item["tag"] == "TREE":
            if util.overlap(start, end, item["start"], item["end"]):
                print item
                result.append(item)
        elif item["tag"] == "SPR":
            if start <= item["pos"] < end:
                print item
                result.append(item)
    '''

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sprs/:region')
def get_sprs(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    result.extend(smc_db.get_sprs(chrom, start, end))

    '''
    for item in smc:
        if item["tag"] == "SPR":
            if start <= item["pos"] < end:
                print item
                result.append(item)
    '''

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sites/:region')
def get_sites(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    
    for pos, col in sites_db.get_sites(chrom, start, end, arg_names):
        result.append({"pos": pos, "col": col})

    return callback + "('" + json.dumps(result) + "');"



#=============================================================================

smc_file = sys.argv[1]

if len(sys.argv) > 2:
    sites_file = sys.argv[2]
else:
    sites_file = None

util.tic("reading arg...")
if smc_file.endswith(".db"):
    smc_db = ArgDB().connect(smc_file)
else:
    smc_db = ArgDB().connect(":memory:")
    smc_db.add_smc_file(smc_file)
util.toc()

arg_names = smc_db.get_names()

'''
for item in smc:
    if item["tag"] == "NAMES":
        arg_names = item["names"]
        break
'''

if sites_file:
    util.tic("reading sites...")
    if sites_file.endswith(".db"):
        sites_db = SitesDB().connect(sites_file)
    else:
        sites_db = SitesDB().connect(":memory:")
        sites_db.add_sites_file(sites_file)
    util.toc()
else:
    sites = None
print "done"


run(host='localhost', port=8080)

