#!/usr/bin/env python

import json
import os
import optparse

import arghmm
from arghmm.bottle import get
from arghmm.bottle import HTTPResponse
from arghmm.bottle import request
from arghmm.bottle import response
from arghmm.bottle import run
from arghmm.bottle import static_file
from arghmm.bottle import template
from arghmm.db import ArgDB
from arghmm.db import SitesDB

from rasmus import util


BASE_DIR = os.path.dirname(os.path.dirname(__file__))

o = optparse.OptionParser()
o.add_option("-p", "--port", type="int", default=8080)
o.add_option("", "--pub", action="store_true")

conf, args = o.parse_args()

#=============================================================================
# routes


# get one tree
@get('/tree/:pos')
def get_tree(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")

    try:
        return (callback + "('" +
                json.dumps(smc_db.get_trees(chrom, pos, pos).next()) + "');")
    except:
        return ""


# get one tree and spr
@get('/tree-spr/:pos')
def get_tree_spr(pos=0):
    chrom, pos = pos.split(":")
    pos = int(pos)

    callback = request.query.get("callback", "jsonp_callback")

    try:
        result = [smc_db.get_trees(chrom, pos, pos).next()]
        end = result[0]["end"]
        result.append(smc_db.get_sprs(chrom, end, end+1).next())
    except:
        result = []

    return callback + "('" + json.dumps(result) + "');"


# get a region of trees and sprs
@get('/trees/:region')
def get_trees(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    result.extend(smc_db.get_trees(chrom, start, end))
    result.extend(smc_db.get_sprs(chrom, start, end))
    result.sort(key=lambda x: (x["start"], 1) if "start" in x
                else (x["pos"], 0))

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sprs/:region')
def get_sprs(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []
    result.extend(smc_db.get_sprs(chrom, start, end))

    return callback + "('" + json.dumps(result) + "');"


# get a region of sprs
@get('/sites/:region')
def get_sites(region=""):
    chrom, region = region.split(":")
    tokens = region.split("-")
    if len(tokens) != 2:
        raise HTTPResponse(status=404)

    start = int(tokens[0])
    end = int(tokens[1])

    callback = request.query.get("callback", "jsonp_callback")

    result = []

    for pos, col in sites_db.get_sites(chrom, start, end, arg_names):
        result.append({"pos": pos, "col": col})

    return callback + "('" + json.dumps(result) + "');"


# get static files
@get('/static/<filename:re:.*>')
def get_static_file(filename):
    root_path = os.path.join(BASE_DIR, 'argserver/static')
    return static_file(filename, root=root_path)


# get argtrack.js
@get('/argtrack.js')
def get_argtrack():
    response.headers['Content-Type'] = 'text/javascript'
    root_path = os.path.join(BASE_DIR, 'argserver/templates')
    host = "%s://%s" % (request.urlparts.scheme,
                        request.urlparts.netloc)
    return template(root_path + '/argtrack.js',
                    {"host": host})

#=============================================================================

smc_file = args[0]

if len(args) > 1:
    sites_file = args[1]
else:
    sites_file = None

util.tic("reading arg...")
if smc_file.endswith(".db"):
    smc_db = ArgDB().connect(smc_file)
else:
    smc_db = ArgDB().connect(":memory:")
    smc_db.add_smc_file(smc_file)
util.toc()

arg_names = smc_db.get_names()


if sites_file:
    util.tic("reading sites...")
    if sites_file.endswith(".db"):
        sites_db = SitesDB().connect(sites_file)
    else:
        sites_db = SitesDB().connect(":memory:")
        sites_db.add_sites_file(sites_file)
    util.toc()
else:
    sites = None
print "done"


if conf.pub:
    run(host='', port=8080)
else:
    run(host='localhost', port=8080)
