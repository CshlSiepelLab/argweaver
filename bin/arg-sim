#!/usr/bin/env python

import sys, os, optparse

import arghmm

from compbio import arglib
from rasmus import util


o = optparse.OptionParser()
o.add_option("-k", "--nseqs", type="int")
o.add_option("-N", "--popsize", type="float", default=1e4)
o.add_option("-r", "--recombrate", type="float", default=1.5e-8)
o.add_option("-m", "--mutrate", type="float", default=2.5e-8)
o.add_option("-L", "--seqlen", type="int", default=int(200e3))
o.add_option("-c", "--chrom", default="chr")
o.add_option("-o", "--output", default="out")
o.add_option("", "--ntimes", type="int", default=20)
o.add_option("", "--maxtime", type="float", default=180e3)
o.add_option("", "--model", default="dsmc",
             help="simulation model: dsmc, smc, coal_recomb (default=dsmc)")
o.add_option("", "--infsites", action="store_true", default=False)
o.add_option("-R", "--recombmap", metavar="<recombination rate map file>",
             help="recombination map file")

if len(sys.argv) == 1:
    o.print_help()
    sys.exit(1)

conf, args = o.parse_args()

#=============================================================================

# log model parameters
print "model parameters:"
print "  nseqs =", conf.nseqs
print "  seqlen =", conf.seqlen
print "  mutation rate =", conf.mutrate
print "  recombination rate =", conf.recombrate
print "  population size =", conf.popsize
print

if conf.recombmap:
    recombmap = util.read_delim(conf.recombmap, parse=True)
else:
    recombmap = None

if conf.model == "coal_recomb":
    print "simulating using the Coalescent with Recombination model..."
    arg = arglib.sample_arg(conf.nseqs, 2*conf.popsize, conf.recombrate,
                            start=0, end=conf.seqlen)
    muts = arglib.sample_arg_mutations(arg, conf.mutrate)

elif conf.model == "smc":
    print "simulating using the SMC model..."
    arg = arglib.sample_arg_smc(conf.nseqs, 2*conf.popsize, conf.recombrate,
                                start=0, end=conf.seqlen)
    muts = arglib.sample_arg_mutations(arg, conf.mutrate)

elif conf.model == "dsmc":
    print "simulating using the DSMC model..."
    times = arghmm.get_time_points(ntimes=conf.ntimes, maxtime=conf.maxtime)
    arg = arghmm.sample_arg_dsmc(conf.nseqs, 2*conf.popsize, conf.recombrate,
                                 recombmap=recombmap,
                                 start=0, end=conf.seqlen, times=times)
    muts = arghmm.sample_arg_mutations(arg, conf.mutrate, times=times)

else:
    print >>sys.stderr, "unknown simulation model:", conf.model

# simulate sequence
seqs = arghmm.make_alignment(arg, muts, infsites=conf.infsites)
sites = arghmm.seqs2sites(seqs)
sites.chrom = conf.chrom

# write output
print "writing output: ", conf.output + ".{sites,arg}"

path = os.path.dirname(conf.output)
util.makedirs(path)

#seqs.write(conf.output + ".fa")
sites.write(conf.output + ".sites")
arglib.write_arg(conf.output + ".arg", arg)




