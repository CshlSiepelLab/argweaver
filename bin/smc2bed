#!/usr/bin/env python

import optparse
import sys
import StringIO
import argweaver
from rasmus import treelib
from rasmus import util

o = optparse.OptionParser(
    usage="%prog SAMPLE_NUM SMC_FILE",
    description="""
Re-format SMC file into bed-like format which supports combined
samples in a single file. The idea is to run this on many files,
concatenate the output, pipe to sort-bed, gzip, and use tabix
to create an index.
""")
o.add_option("-r", "--region",  metavar="START-END",
             help="Only process between these coordinates (1-based)")
conf, args = o.parse_args()
region = None
if conf.region:
    region = map(int, conf.region.split("-"))

if len(args) != 2:
    o.print_help()
    sys.exit(1)

sample_num = args[0];
smcfile = args[1];

names = None
need_spr = False
end = -1
chrom = None

def write_treenode(node):
    if node.is_leaf():
        return ":%.1f" % node.dist
    else:
        return "%d:%.1f" % (node.name, node.dist)

for item in argweaver.iter_smc_file(smcfile, parse_trees=True,
                                    apply_spr=False, region=region):
    if item["tag"] == "TREE":
        if need_spr:
            print "-1\t-1\t-1\t-1"
            need_spr = False
        start = item["start"]-1
        end = item["end"]
        if region:
            if item["start"] < region[0]:
                start = region[0]-1
            if item["end"] > region[1]:
                end = region[1]
        for i, name in enumerate(names):
            item["tree"].rename(i, name)
        stream = StringIO.StringIO()
        item["tree"].write(stream, writeData=write_treenode, oneline=True, rootData=True)
        util.print_row(chrom, start, end, sample_num, stream.getvalue(), newline="\t")
        need_spr = True
    elif item["tag"] == "SPR" and item["pos"] == end and need_spr:
        if item["recomb_node"] < len(names):
            item["recomb_node"] = names[item["recomb_node"]]
        if item["coal_node"] < len(names):
            item["coal_node"] = names[item["coal_node"]]
        util.print_row(item["recomb_node"], item["recomb_time"],
                       item["coal_node"], item["coal_time"])
        need_spr = False
    elif item["tag"] == "REGION":
        chrom = item["chrom"]
    elif item["tag"] == "NAMES":
        names = item["names"]
    
if need_spr:
    print "-1\t-1\t-1\t-1"
        
        
